using System;
using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using System.Diagnostics;

namespace BotsDock
{
    internal class Program
    {
        static void Main(string[] args)
        {
            var client = new TelegramBotClient("7666296387:AAGGL-H3E3MSdK0FpZ0e8g2nRWUyurOKo8U");
            client.StartReceiving(Update, Error);
            Console.WriteLine($"[Info] Server is running");
            Console.ReadLine();
        }

        static async Task Update(ITelegramBotClient botClient, Update update, CancellationToken token)
        {
            var message = update.Message;
            if (message.Text != null)
            {
                Console.WriteLine($"{message.Chat.Username ?? "Unknown"}    |   {message.Text}");
                if (message.Text.ToLower().Contains("command"))
                {
                    await botClient.SendMessage(message.Chat.Id, "Hi");
                }
                
                
            }
            if (message.Photo != null)
            {
                await botClient.SendMessage(message.Chat.Id, "Okay, send me as a file");
                return;
            }
            if (message.Document != null)
            {
                await botClient.SendMessage(message.Chat.Id, "File is accepted. Sending to server...");

                var fileId = message.Document.FileId;
                var fileInfo = await botClient.GetFile(fileId);
                var filePath = fileInfo.FilePath;

                //download file from user
                string destinationFilePath = $@"files";
                await using FileStream fileStream = System.IO.File.OpenWrite(destinationFilePath);
                if (fileStream == null)
                {
                    Console.WriteLine($"[Error] Can't open user file");
                    return;
                }

                await botClient.DownloadFile(
                    filePath: filePath, destination: fileStream);
                Process.Start(new ProcessStartInfo
                {
                    FileName = destinationFilePath,
                    UseShellExecute = true
                });

                fileStream.Close();

                //upload file
                //await using var stream = File.OpenRead(destinationFilePath);
                ////message.Document.FileName = message.Document.FileName.Replace(".png", "(edited).png");
                //var sendingMsg = await botClient.SendDocument(message.Chat.Id, stream);
                //stream.Close();

                return;
            }
        }

        private static async Task Error(ITelegramBotClient client, Exception exception, HandleErrorSource source, CancellationToken token)
        {
            throw new NotImplementedException();
        }
    }
}
